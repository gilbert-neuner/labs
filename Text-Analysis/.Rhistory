# Calculation of bandwidth
bw <- bw.nrd(tax)
# Calculation of grid
tax_grid <- seq(min(tax), max(tax), length = 100)
# Call the C function
system("R CMD SHLIB nadaraya.c")
dyn.load("nadaraya.dll")
nadaraya <- function(n, X, Y, m, g2, bw) {
.C("nadaraya", as.integer(n), as.double(X), as.double(Y), as.integer(m), as.double(g2), double(m), as.double(bw))[[6]]
}
fhat <- nadaraya(48, tax, consumption, 100, tax_grid, bw)
# Kernel regression on sampled data
sampled_tax <- matrix(nrow = 100, ncol = 200)
sampled_consumption <- matrix(nrow = 100, ncol = 200)
sampled_fhat <- matrix(nrow = 100, ncol = 200)
for(i in 1:200) {
sampling_index <- sample(1:48, 100, replace = TRUE)
sampled_tax[, i] <- tax[sampling_index]
sampled_consumption[, i] <- consumption[sampling_index]
sampled_fhat[, i] <- nadaraya(100, sampled_tax[, i], sampled_consumption[, i], 100, tax_grid, bw)
}
# Calculation of confidence intervals
f_sort <- apply(sampled_fhat, 1, sort)
f5 <- f_sort[, 5]
f195 <- f_sort[, 195]
dim(f_sort)
dim(sampled_fhat)
dim(apply(sampled_fhat, 1, sort))
dim(apply(sampled_fhat, 1, order))
a <- matrix(runif(9), nrow = 3)
a
a <- matrix(runif(12), nrow = 3)
a
apply(a, 1, sort)
apply(a, 2, sort)
# Calculation of bandwidth
bw <- bw.nrd(tax)
# Calculation of grid
tax_grid <- seq(min(tax), max(tax), length = 100)
# Call the C function
system("R CMD SHLIB nadaraya.c")
dyn.load("nadaraya.dll")
nadaraya <- function(n, X, Y, m, g2, bw) {
.C("nadaraya", as.integer(n), as.double(X), as.double(Y), as.integer(m), as.double(g2), double(m), as.double(bw))[[6]]
}
fhat <- nadaraya(48, tax, consumption, 100, tax_grid, bw)
# Kernel regression on sampled data
sampled_tax <- matrix(nrow = 100, ncol = 200)
sampled_consumption <- matrix(nrow = 100, ncol = 200)
sampled_fhat <- matrix(nrow = 100, ncol = 200)
for(i in 1:200) {
sampling_index <- sample(1:48, 100, replace = TRUE)
sampled_tax[, i] <- tax[sampling_index]
sampled_consumption[, i] <- consumption[sampling_index]
sampled_fhat[, i] <- nadaraya(100, sampled_tax[, i], sampled_consumption[, i], 100, tax_grid, bw)
}
# Calculation of confidence intervals
f_sort <- apply(sampled_fhat, 1, sort)
f5 <- f_sort[5, ]
f195 <- f_sort[195, ]
plot(tax_grid, fhat, type = "l", xlab = "Tax", ylab = "Density", main = "Density of Petroleum Consumption", ylim = c(0, 1.5))
lines(tax_grid, f5)
lines(tax_grid, f195, col = "red")
legend("topright", c("Scott's Method", "95% confidence bands"), lty = 1, col = c("black", "red"), cex = 0.8)
plot(tax_grid, fhat, type = "l", xlab = "Tax", ylab = "Density", main = "Density of Petroleum Consumption", ylim = c(0, 1.5))
fhat
plot(tax_grid, fhat, type = "l", xlab = "Tax", ylab = "Density", main = "Density of Petroleum Consumption")
lines(tax_grid, f5)
lines(tax_grid, f195, col = "red")
legend("topright", c("Scott's Method", "95% confidence bands"), lty = 1, col = c("black", "red"), cex = 0.8)
plot(tax_grid, fhat, type = "l", xlab = "Tax", ylab = "Density", main = "Density of Petroleum Consumption", ylim = c(450, 750))
lines(tax_grid, f5)
lines(tax_grid, f195)
legend("topright", c("Scott's Method", "95% confidence bands"), lty = 1, col = c("black", "red"), cex = 0.8)
plot(tax_grid, fhat, type = "l", xlab = "Tax", ylab = "Density", main = "Density of Petroleum Consumption", ylim = c(450, 800))
lines(tax_grid, f5)
lines(tax_grid, f195)
legend("topright", c("Scott's Method", "95% confidence bands"), lty = 1, col = c("black", "red"), cex = 0.8)
plot(tax_grid, fhat, type = "l", xlab = "Tax", ylab = "Density", main = "Density of Petroleum Consumption", ylim = c(400, 800))
lines(tax_grid, f5)
lines(tax_grid, f195)
legend("topright", c("Scott's Method", "95% confidence bands"), lty = 1, col = c("black", "red"), cex = 0.8)
plot(tax_grid, fhat, type = "l", xlab = "Tax", ylab = "Density", main = "Density of Petroleum Consumption", ylim = c(400, 800))
lines(tax_grid, f5, lty = "dashed")
lines(tax_grid, f195, lty = "dashed")
legend("topright", c("Scott's Method", "95% confidence bands"), lty = 1, lty = c("solid", "dashed"), cex = 0.8)
plot(tax_grid, fhat, type = "l", xlab = "Tax", ylab = "Density", main = "Density of Petroleum Consumption", ylim = c(400, 800))
lines(tax_grid, f5, lty = "dashed")
lines(tax_grid, f195, lty = "dashed")
legend("topright", c("Scott's Method", "95% confidence bands"), lty = c("solid", "dashed"), cex = 0.8)
# 1b
petrol <- read.table("petrol.txt")
tax <- petrol[, 2] # X
consumption <- petrol[, 6] # Y
# 1c
# Calculation of bandwidth
bw <- bw.nrd(tax)
# Calculation of grid
tax_grid <- seq(min(tax), max(tax), length = 100)
# Call the C function
system("R CMD SHLIB nadaraya.c")
dyn.load("nadaraya.dll")
nadaraya <- function(n, X, Y, m, g2, bw) {
.C("nadaraya", as.integer(n), as.double(X), as.double(Y), as.integer(m), as.double(g2), double(m), as.double(bw))[[6]]
}
fhat <- nadaraya(48, tax, consumption, 100, tax_grid, bw)
# 1d, 1e
# Kernel regression on sampled data
sampled_tax <- matrix(nrow = 100, ncol = 200)
sampled_consumption <- matrix(nrow = 100, ncol = 200)
sampled_fhat <- matrix(nrow = 100, ncol = 200)
for(i in 1:200) {
sampling_index <- sample(1:48, 100, replace = TRUE)
sampled_tax[, i] <- tax[sampling_index]
sampled_consumption[, i] <- consumption[sampling_index]
sampled_fhat[, i] <- nadaraya(100, sampled_tax[, i], sampled_consumption[, i], 100, tax_grid, bw)
}
# Calculation of confidence intervals
f_sort <- apply(sampled_fhat, 1, sort)
f5 <- f_sort[5, ]
f195 <- f_sort[195, ]
# 1f
plot(tax_grid, fhat, type = "l", xlab = "Tax", ylab = "Density", main = "Density of Petroleum Consumption", ylim = c(400, 800))
lines(tax_grid, f5, lty = "dashed")
lines(tax_grid, f195, lty = "dashed")
legend("topright", c("Scott's Method", "95% confidence bands"), lty = c("solid", "dashed"), cex = 0.8)
# 1b
petrol <- read.table("petrol.txt")
tax <- petrol[, 2] # X
consumption <- petrol[, 6] # Y
# 1c
# Calculation of bandwidth
bw <- bw.nrd(tax)
# Calculation of grid
tax_grid <- seq(min(tax), max(tax), length = 100)
# Call the C function
system("R CMD SHLIB nadaraya.c")
dyn.load("nadaraya.dll")
nadaraya <- function(n, X, Y, m, g2, bw) {
.C("nadaraya", as.integer(n), as.double(X), as.double(Y), as.integer(m), as.double(g2), double(m), as.double(bw))[[6]]
}
fhat <- nadaraya(48, tax, consumption, 100, tax_grid, bw)
# 1d, 1e
# Kernel regression on sampled data
sampled_tax <- matrix(nrow = 100, ncol = 200)
sampled_consumption <- matrix(nrow = 100, ncol = 200)
sampled_fhat <- matrix(nrow = 100, ncol = 200)
for(i in 1:200) {
sampling_index <- sample(1:48, 100, replace = TRUE)
sampled_tax[, i] <- tax[sampling_index]
sampled_consumption[, i] <- consumption[sampling_index]
sampled_fhat[, i] <- nadaraya(100, sampled_tax[, i], sampled_consumption[, i], 100, tax_grid, bw)
}
# Calculation of confidence intervals
f_sort <- apply(sampled_fhat, 1, sort)
f5 <- f_sort[5, ]
f195 <- f_sort[195, ]
# 1f
plot(tax_grid, fhat, type = "l", xlab = "Tax", ylab = "Density", main = "Density of Petroleum Consumption", ylim = c(400, 800))
lines(tax_grid, f5, lty = "dotted")
lines(tax_grid, f195, lty = "dotted")
legend("topright", c("Scott's Method", "95% confidence bands"), lty = c("solid", "dotted"), cex = 0.8)
library(mobilizr)
data(flights)
force(flights)
tv <- read.csv("tv.csv")
View(tv)
tv <- read.csv("tv.csv", header = FALSE)
View(tv)
tv <- read.csv("tv.csv", header = FALSE)
names(tv) <- c("rank", "broadcast", "viewers", "date", "network")
View(tv)
?plot
View(tv)
library(dplyr)
library(dplyr)
tv <- read.csv("tv.csv", header = FALSE)
names(tv) <- c("rank", "broadcast", "viewers", "date", "network")
tv <- tv %>%
mutate(date, as.Date(date, "%B %d, $Y"))
library(dplyr)
tv <- read.csv("tv.csv", header = FALSE)
names(tv) <- c("rank", "broadcast", "viewers", "date", "network")
tv <- tv %>%
mutate(date = as.Date(date, "%B %d, $Y"))
library(dplyr)
tv <- read.csv("tv.csv", header = FALSE)
names(tv) <- c("rank", "broadcast", "viewers", "date", "network")
tv <- tv %>%
mutate(date = as.Date(date, "%B %d, %Y"))
tv$date
plot(tv$date, tv$viewers)
library(dplyr)
tv <- read.csv("tv.csv", header = FALSE)
names(tv) <- c("rank", "broadcast", "viewers", "date", "network")
tv <- tv %>%
mutate(date = as.Date(date, "%B %d, %Y"))
plot(tv$date, tv$viewers, col = tv$network)
library(dplyr)
tv <- read.csv("tv.csv", header = FALSE)
names(tv) <- c("rank", "broadcast", "viewers", "date", "network")
tv <- tv %>%
mutate(
date = as.Date(date, "%B %d, %Y"),
network = factor(network)
)
plot(tv$date, tv$viewers, col = tv$network)
plot(tv$date, tv$viewers, pch = 19, col = tv$network)
library(dplyr)
tv <- read.csv("tv.csv", header = FALSE)
names(tv) <- c("rank", "broadcast", "viewers", "date", "network")
tv <- tv %>%
mutate(
date = as.Date(date, "%B %d, %Y"),
network = factor(network)
)
plot(tv$date, tv$viewers, pch = 19, col = tv$network)
legend("top", legend = levels(tv$network), pch = 19, col = tv$network)
library(dplyr)
tv <- read.csv("tv.csv", header = FALSE)
names(tv) <- c("rank", "broadcast", "viewers", "date", "network")
tv <- tv %>%
mutate(
date = as.Date(date, "%B %d, %Y"),
network = factor(network)
)
plot(tv$date, tv$viewers, pch = 19, col = tv$network)
legend("top", legend = levels(tv$network), pch = 19, col = tv$network, cex = 0.5)
library(dplyr)
tv <- read.csv("tv.csv", header = FALSE)
names(tv) <- c("rank", "broadcast", "viewers", "date", "network")
tv <- tv %>%
mutate(
date = as.Date(date, "%B %d, %Y"),
network = factor(network)
)
plot(tv$date, tv$viewers, pch = 19, col = tv$network)
legend("top", legend = levels(tv$network), pch = 19, col = tv$network)
tv$network
palette()
library(dplyr)
tv <- read.csv("tv.csv", header = FALSE)
names(tv) <- c("rank", "broadcast", "viewers", "date", "network")
tv <- tv %>%
mutate(
date = as.Date(date, "%B %d, %Y"),
network = factor(network)
)
plot(tv$date, tv$viewers, pch = 19, col = tv$network)
legend("top", legend = levels(tv$network), pch = 19, col = factor(levels(tv$network)))
library(dplyr)
tv <- read.csv("tv.csv", header = FALSE)
names(tv) <- c("rank", "broadcast", "viewers", "date", "network")
tv <- tv %>%
mutate(
date = as.Date(date, "%B %d, %Y"),
network = factor(network)
)
plot(tv$date, tv$viewers, pch = 19, col = tv$network, xlab = "Date", ylab = "Number of Viewers", main = "Most watched TV broadcasts in the US")
legend("top", legend = levels(tv$network), pch = 19, col = factor(levels(tv$network)))
library(dplyr)
tv <- read.csv("tv.csv", header = FALSE)
names(tv) <- c("rank", "broadcast", "viewers", "date", "network")
tv <- tv %>%
mutate(
date = as.Date(date, "%B %d, %Y"),
network = factor(network)
)
plot(tv$date, tv$viewers, pch = 19, col = tv$network, xlab = "Date", ylab = "Number of Viewers", main = "Most watched TV broadcasts in the US")
legend("top", legend = levels(tv$network), pch = 19, col = factor(levels(tv$network)), main = "Network")
library(dplyr)
tv <- read.csv("tv.csv", header = FALSE)
names(tv) <- c("rank", "broadcast", "viewers", "date", "network")
tv <- tv %>%
mutate(
date = as.Date(date, "%B %d, %Y"),
network = factor(network)
)
plot(tv$date, tv$viewers, pch = 19, col = tv$network, xlab = "Date", ylab = "Number of Viewers", main = "Most watched TV broadcasts in the US")
legend("top", legend = levels(tv$network), pch = 19, col = factor(levels(tv$network)))
1000 %/% 500
1001 %/% 500
1000 / 500
1001 / 500
1001 %/% 500
library(mobilizr)
more_rolls <- function(times) {
out <- integer(0)
for(i in 1:times) {
out <- c(out, roll_die("A", times = 1))
}
out
}
more_rolls(1234)
dice <- more_rolls(1234)
diceA <- more_rolls(1234)
?roll_die
more_rolls <- function(times, die = "A") {
out <- integer(0)
for(i in 1:times) {
out <- c(out, roll_die(die, times = 1))
}
out
}
diceA <- more_rolls(1234)
diceA <- more_rolls(1234)
roll_die
roll_die("A", times = 1)
roll_die(times = 6)
more_rolls <- function(die, times) {
if (!die %in% c("A", "B")) {
stop("Please set the die argument to be either 'A' or 'B'")
}
if(die == "A") {
rolls <- sample(1:6, size = times, replace = TRUE)
}
else if(die == "B") {
s_unfair <- 0.22
s_fair <- (1 - s_unfair)/5
probs <- rep(s_fair, 6)
probs[3] <- s_unfair
rolls <- sample(1:6, size = times, prob = probs, replace = TRUE)
}
rolls
}
more_rolls(die = "A", times = 10000)
library(mobilizr)
?flights
data(flights)
force(flights)
View(flights)
rm(list = ls())
library(mobilizr)
?flights
data(flights)
View(flights)
unique(flights$airport)
load("C:/Users/Gilbert Neuner/Desktop/UCLA MS/IDS/labs/Text-Analysis/pride.Rda")
View(pride)
pride_words <- tally(~word, data = pride, format = "data.frame")
library(mobilizr)
pride_words <- tally(~word, data = pride, format = "data.frame")
View(pride_words)
pride <- pride %>%
mutate(word, gsub, "_", "")
pride <- pride %>%
mutate(word = gsub("_", "", word))
pride_words <- tally(~word, data = pride, format = "data.frame")
View(pride_words)
setwd("C:/Users/Gilbert Neuner/Desktop/UCLA MS/IDS/labs/Text-Analysis")
save("pride_words2.rda", pride_words)
save(pride_words, "pride_words2.rda")
save(pride_words, file = "pride_words2.rda")
View(pride)
View(pride_words)
save(pride, "pride.rda")
save(pride, file = "pride.rda")
rm(list = ls())
load("C:/Users/Gilbert Neuner/Desktop/UCLA MS/IDS/labs/Text-Analysis/pride.rda")
pride_words <- tally(~word, data = pride, format = "data.frame")
View(pride_words)
wordcloud <- function(formula, data, max.words = 100, color = "black"){
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, color = color)
}
View(pride_words)
load("C:/Users/Gilbert Neuner/Desktop/UCLA MS/IDS/labs/Text-Analysis/stop_words.Rda")
load("C:/Users/Gilbert Neuner/Desktop/UCLA MS/IDS/labs/Text-Analysis/sentiments.Rda")
View(stop_words)
pride_interesting <- anti_join(pride_words, stop_words, word)
pride_interesting <- anti_join(pride_words, stop_words, by = word)
View(pride_words)
pride_interesting <- anti_join(pride_words, stop_words, by = "word")
View(pride_interesting)
pride_sentiments <- inner_join(pride_interesting, sentiments, by = "word")
View(pride_sentiments)
pride_sentiments <- pride_sentiments %>%
mutate(color = recode(sentiment, "negative" = "red", "positive" = "blue"))
wordcloud(Freq ~ word, data = pride_sentiments)
wordcloud(Freq ~ word, data = pride_sentiments, color = color)
View(wordcloud)
?wordcloud
wordcloud(Freq ~ word, data = pride_sentiments, color = c("red", "blue"))
wordcloud(Freq ~ word, data = pride_sentiments, color = c("red", "blue", "green"))
wordcloud(Freq ~ word, data = pride_sentiments, color = pride_sentiments$color)
wordcloud <- function(formula, data, max.words = 100, colors = "black"){
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = colors, ordered.colors = TRUE)
}
wordcloud(Freq ~ word, data = pride_sentiments, colors = pride_sentiments$color)
wordcloud(Freq ~ word, data = pride_sentiments, colors = color)
?all.vars
wordcloud <- function(formula, data, max.words = 100, colors = "black"){
if(is.character(colors)) {
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = colors, ordered.colors = TRUE)
}
else {
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = data[, all.vars(color)[1]], ordered.colors = TRUE)
}
}
wordcloud(Freq ~ word, data = pride_sentiments, color = c("red", "blue"))
wordcloud(Freq ~ word, data = pride_sentiments, colors = c("red", "blue"))
is.character(c("red", "blue"))
wordcloud <- function(formula, data, max.words = 100, colors = "black"){
if(is.character(colors)) {
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = colors)
}
else {
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = data[, all.vars(color)[1]], ordered.colors = TRUE)
}
}
wordcloud(Freq ~ word, data = pride_sentiments, colors = c("red", "blue"))
wordcloud(Freq ~ word, data = pride_sentiments)
all.vars(color)
wordcloud <- function(formula, data, max.words = 100, colors = "black"){
if(is.character(colors)) {
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = colors)
}
else {
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = data[, all.vars(color)[1]], ordered.colors = TRUE)
}
}
wordcloud(Freq ~ word, data = pride_sentiments, colors = color)
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = data[, deparse(substitute(colors))], ordered.colors = TRUE)
wordcloud <- function(formula, data, max.words = 100, colors = "black"){
if(is.character(colors)) {
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = colors)
}
else {
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = data[, deparse(substitute(colors))], ordered.colors = TRUE)
}
}
wordcloud(Freq ~ word, data = pride_sentiments, colors = color)
all.vars(~color)
deparse(substitute(colors))
dat <- data.frame(x = 1:4,
y = 5:8)
new_column2 <- function(df,col_name,col1,col2){
col_name <- deparse(substitute(col_name))
col1 <- deparse(substitute(col1))
col2 <- deparse(substitute(col2))
df[[col_name]] <- df[[col1]] + df[[col2]]
df
}
new_column2(dat,z,x,y)
wordcloud <- function(formula, data, max.words = 100, colors = "black"){
if(is.character(colors)) {
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = colors)
}
else {
colors <- deparse(substitute(colors))
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = data[, colors], ordered.colors = TRUE)
}
}
wordcloud(Freq ~ word, data = pride_sentiments, colors = color)
wordcloud <- function(formula, data, max.words = 100, colors = "black"){
if(is.character(colors)) {
print("hi")
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = colors)
}
else {
print("bye")
colors <- deparse(substitute(colors))
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = data[, colors], ordered.colors = TRUE)
}
}
wordcloud(Freq ~ word, data = pride_sentiments, colors = color)
wordcloud <- function(formula, data, max.words = 100, colors){
if(is.character(colors)) {
print("hi")
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = colors)
}
else {
print("bye")
colors <- deparse(substitute(colors))
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = data[, colors], ordered.colors = TRUE)
}
}
wordcloud(Freq ~ word, data = pride_sentiments, colors = color)
deparse(substitute("sup"))
?deparse
?substitute
?tryCatch
wordcloud <- function(formula, data, max.words = 100, colors = "black"){
tryCatch(
{
print("hi")
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = colors)
},
error = function(e) {
print("bye")
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = data[, deparse(substitute(colors))], ordered.colors = TRUE)
}
)
}
wordcloud(Freq ~ word, data = pride_sentiments)
wordcloud(Freq ~ word, data = pride_sentiments)
wordcloud(Freq ~ word, data = pride_sentiments, color = "red")
wordcloud(Freq ~ word, data = pride_sentiments, color = c("red", "blue"))
wordcloud(Freq ~ word, data = pride_sentiments, colors = "red")
wordcloud(Freq ~ word, data = pride_sentiments, colors = color)
wordcloud <- function(formula, data, max.words = 100, colors = "black"){
tryCatch(
{
print("hi")
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = colors)
},
error = function(e) {
print(deparse(substitute(colors)))
wordcloud::wordcloud(words = data[, all.vars(formula)[2]], freq = data[, all.vars(formula)[1]], max.words = max.words, colors = data[, deparse(substitute(colors))], ordered.colors = TRUE)
}
)
}
wordcloud(Freq ~ word, data = pride_sentiments, colors = color)
